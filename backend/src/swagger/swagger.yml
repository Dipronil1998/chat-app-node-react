openapi: '3.0.0'
info:
  title: 'Chat API(Socket.io)'
  version: '1.0.0'
  description: 'This is a Chat Application API made with Express and documented with Swagger'
servers:
  - url: 'http://localhost:8001'
    description: 'Development server'



tags:
  - name: Auth
    description: The authentication API
  - name: User
    description: User management API
  - name: Message
    description: Message management API

paths:
  /api/auth/signup:
    post:
      summary: Signup a new user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequestBody'
      responses:
        201:
          description: Signup successfully
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/SignupResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        400:
          description: Bad request
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

  /api/auth/login:
    post:
      summary: Login a user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestBody'
      responses:
        200:
          description: Login successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        400:
          description: Invalid username or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginInvalidCredencial'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

  /api/auth/logout:
    post:
      summary: Logout a user
      tags: [Auth]
      security:
        - bearerAuth: []
      responses:
        200:
          description: Logged out successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

  /api/users:
    get:
      summary: Get users for sidebar
      tags: [User]
      security:
        - bearerAuth: []
      responses:
        200:
          description: Fetched sidebar user data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SidebarResponse'
        401:
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

  /api/messages/send/{receiverId}:
    post:
      summary: Send a message
      tags: [Message]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: receiverId
          required: true
          schema:
            type: string
          description: ID of the user to send the message to
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMessageRequestBody'
      responses:
        201:
          description: New message sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendMessageResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

  /api/messages/{userToChatId}:
    get:
      summary: Get messages for a conversation
      tags: [Message]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userToChatId
          required: true
          schema:
            type: string
          description: ID of the user to get the messages with
      responses:
        200:
          description: Fetched messages for the conversation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMessagesResponse'
        401:
          description: Unauthorized 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'



components:
  schemas:
    SignupRequestBody:
      type: object
      required:
        - fullName
        - username
        - password
        - confirmPassword
        - gender
      properties:
        fullName:
          type: string
          description: The full name of the user
        username:
          type: string
          description: The username of the user
        password:
          type: string
          description: The password of the user
        confirmPassword:
          type: string
          description: The password confirmation
        gender:
          type: string
          enum: [male, female]
          description: The gender of the user
      example:
        fullName: John Doe
        username: johndoe
        password: secret123
        confirmPassword: secret123
        gender: male
    
    SignupResponse:
      type: object
      properties:
        message:
          type: string
          example: "Signup successfully."
        status:
          type: boolean
          example: true
        statusCode:
          type: integer
          example: 201
        response:
          type: object
          properties:
            _id:
              type: string
              example: "6699f6730eea25a407dd5795"
            fullName:
              type: string
              example: "dipronil Das"
            username:
              type: string
              example: "dipronil1"
            profilePic:
              type: string
              example: "https://avatar.iran.liara.run/public/girl?username=dipronil1"

    NotFoundResponse:
      type: object
      properties:
        message:
          type: string
          example: "Page not found"
        status:
          type: boolean
          example: false
        statusCode:
          type: integer
          example: 404
        response:
          type: string
          example: "failed"
    
    InternalServerErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: "Please try again after some time"
        status:
          type: boolean
          example: false
        statusCode:
          type: integer
          example: 404
        response:
          type: string
          example: "failed"      

    UnauthorizedResponse:
      type: object
      properties:
        message:
          type: string
          example: "Unauthorized - No Token Provided"
        status:
          type: boolean
          example: false
        statusCode:
          type: integer
          example: 404
        response:
          type: string
          example: "failed"
    
    LoginRequestBody:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: The username of the user
        password:
          type: string
          description: The password of the user
      example:
        username: johndoe
        password: secret123

    LoginResponse:
      type: object
      properties:
        message:
          type: string
          example: "Login successfully."
        status:
          type: boolean
          example: true
        statusCode:
          type: integer
          example: 200
        response:
          type: object
          properties:
            _id:
              type: string
              example: "6699f6730eea25a407dd5795"
            fullName:
              type: string
              example: "John Doe"
            username:
              type: string
              example: "johndoe"
            profilePic:
              type: string
              example: "https://avatar.iran.liara.run/public/boy?username=johndoe"
    
    LoginInvalidCredencial:
      type: object
      properties:
        message:
          type: string
          example: "Invalid username or password"
        status:
          type: boolean
          example: false
        statusCode:
          type: integer
          example: 404
        response:
          type: string
          example: "failed"    

    LogoutResponse:
      type: object
      properties:
        message:
          type: string
          example: "Logged out successfully."
        status:
          type: boolean
          example: true
        statusCode:
          type: integer
          example: 200
        response:
          type: object
          example: {}

    SidebarUserResponse:
      type: object
      properties:
        _id:
          type: string
          example: "6693c1450d8941a3095f0b9f"
        fullName:
          type: string
          example: "Pritha Das"
        username:
          type: string
          example: "pritha"
        gender:
          type: string
          example: "female"
        profilePic:
          type: string
          example: "https://avatar.iran.liara.run/public/girl?username=pritha"
        createdAt:
          type: string
          format: date-time
          example: "2024-07-14T12:15:01.163Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-07-14T12:15:01.163Z"

    SidebarResponse:
      type: object
      properties:
        message:
          type: string
          example: ""
        status:
          type: boolean
          example: true
        statusCode:
          type: integer
          example: 200
        response:
          type: array
          items:
            $ref: '#/components/schemas/SidebarUserResponse'

    Message:
      type: object
      properties:
        _id:
          type: string
          example: "6699f6730eea25a407dd5795"
        senderId:
          type: string
          example: "6699f6730eea25a407dd5795"
        receiverId:
          type: string
          example: "6699f6730eea25a407dd5796"
        message:
          type: string
          example: "Hello, how are you?"
        createdAt:
          type: string
          format: date-time
          example: "2024-07-19T05:15:31.169Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-07-19T05:15:31.169Z"

    SendMessageRequestBody:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: The content of the message
      example:
        message: "Hello, how are you?"
    
    SendMessageResponse:
      type: object
      properties:
        message:
          type: string
          example: "New message sent"
        status:
          type: boolean
          example: true
        statusCode:
          type: integer
          example: 201
        response:
          type: object
          properties:
            newMessage:
              $ref: '#/components/schemas/Message'

    GetMessagesResponse:
      type: object
      properties:
        message:
          type: string
          example: ""
        status:
          type: boolean
          example: true
        statusCode:
          type: integer
          example: 200
        response:
          type: array
          items:
            $ref: '#/components/schemas/Message'

      